name: Kernel Build & Release

on:
  push:
    branches:
      - main  # Change to your main development branch
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    
    # Step 1: Checkout Repository
    - name: Checkout Kernel Source
      uses: actions/checkout@v3

    # Step 2: Install Required Dependencies
    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt install -y bc bison build-essential ccache curl flex git \
        libncurses5-dev libssl-dev libelf-dev python2 python2-minimal zip unzip
        ln -s /usr/bin/python2 /usr/bin/python  # Fix python2 missing issue

    # Step 3: Setup Compiler (Clang)
    - name: Download Clang
      run: |
        mkdir -p toolchain
        wget -O toolchain/clang.tar.gz https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master.tar.gz
        tar -xvf toolchain/clang.tar.gz -C toolchain
        
    # Step 4: Build Kernel
    - name: Compile Kernel
      run: |
        export ARCH=arm64
        export CROSS_COMPILE=$(pwd)/clang/bin/aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=$(pwd)/clang/bin/arm-linux-gnueabi-
        make O=out alioth_defconfig  # Replace with your device's defconfig
        make -j$(nproc) O=out

    # Step 5: Create Flashable ZIP
    - name: Create Flashable ZIP
      run: |
        mkdir -p AnyKernel
        cd AnyKernel
        git clone https://github.com/AlirezaParsi/F3aosp .  # Replace with your AnyKernel3 repo
        cp ../out/arch/arm64/boot/Image.gz-dtb zImage
        zip -r kernel.zip *

    # Step 6: Upload to GitHub Releases
    - name: Upload to Release
      uses: softprops/action-gh-release@v1
      with:
        files: AnyKernel/kernel.zip
        tag_name: kernel-$(date +%Y%m%d-%H%M)
        release_name: "Kernel Build $(date +%Y-%m-%d %H:%M)"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
